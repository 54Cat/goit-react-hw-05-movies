{"version":3,"file":"static/js/673.4118372c.chunk.js","mappings":"6SAEaA,EAAYC,EAAAA,EAAAA,GAAH,sPAYTC,EAAYD,EAAAA,EAAAA,GAAH,qOAMTE,EAAcF,EAAAA,EAAAA,IAAH,uCAIXG,EAAYH,EAAAA,EAAAA,EAAH,6DAKTI,EAAiBJ,EAAAA,EAAAA,EAAH,gD,kBCjBZ,SAASK,IACpB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAgB,mCAAG,WAAOC,GAAP,gFACrBL,GAAW,GADU,mBAGMM,EAAAA,EAAAA,IAAuBD,GAH7B,OAGXE,EAHW,OAIXC,EAAOD,EAASZ,KACtBC,EAAQY,GALS,gDAQjBV,EAAS,CAAED,MAAK,OARC,yBAWjBG,GAAW,GAXM,4EAAH,sDActBI,EAAiBH,EACpB,GAAE,CAACA,KAGA,gCACKF,IAAW,SAACU,EAAA,EAAD,IACXZ,IAAS,SAAC,IAAD,IACTF,IAAQ,+BACL,SAACR,EAAD,UACKQ,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAeC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,aAAtC,OACN,UAACzB,EAAD,YACI,SAACC,EAAD,CAAayB,IAAKD,EAAY,UAnCzC,+BAmCyC,OAlC7C,YAkC6C,OAAwBA,GAAiBE,EAAKC,IAAKL,KACjF,SAACrB,EAAD,UAAYqB,KACZ,SAACpB,EAAD,UAAiBqB,MAHLF,EADV,UAW7B,C","sources":["components/MovieDetails/CastStyled.js","components/MovieDetails/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorList = styled.ul` \ndisplay: grid;\nmax-width: calc(100vw);\ngrid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\ngrid-gap: 20px;\nmargin: 0;\npadding: 0 16px 16px 16px;\nlist-style: none;\nmargin-left: auto;\nmargin-right: auto;\n`;\n\nexport const ActorItem = styled.li` \nbox-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\ntransition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\ntext-align: center;\n`;\n\nexport const ActorPoster = styled.img` \nwidth: 100%;\n`;\n\nexport const ActorName = styled.p` \npadding: 8px 0;\nfont-weight: 500;\n`;\n\nexport const ActorCharacter = styled.p`  \npadding-bottom: 8px;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from 'components/Loader/Loader';\nimport {Error} from 'components/Notification/Notification';\nimport { FetchApiMovieIdCredits } from 'components/FetchApi/FetchApi';\nimport { ActorList, ActorItem, ActorPoster, ActorName, ActorCharacter } from 'components/MovieDetails/CastStyled';\nimport img from 'img/noPhoto.jpg';\n\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/';\nconst SIZE = 'original';\n\nexport default function Cast () {\n    const [cast, setCast] = useState(null);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const { id } = useParams();\n    \n    useEffect(() => {\n        const fetchMovieIdCast = async (movieId) => {\n            setLoading(true);\n            try {\n                const response = await FetchApiMovieIdCredits(movieId);\n                const data = response.cast;\n                setCast(data);\n            }\n            catch (error) {\n                setError({ error });\n            }\n            finally {\n                setLoading(false);\n            }\n        }\n        fetchMovieIdCast(id);\n    }, [id])\n\n    return (\n        <>\n            {loading && <Loader />}\n            {error && <Error />}\n            {cast && <>\n                <ActorList> \n                    {cast.map(({ cast_id, original_name, character, profile_path }) => (\n                        <ActorItem key={cast_id}>\n                            <ActorPoster src={profile_path ? `${BASE_URL}${SIZE}${profile_path}` : img} alt={original_name} />\n                            <ActorName>{original_name}</ActorName>\n                            <ActorCharacter>{character}</ActorCharacter>\n                            </ActorItem>\n                    ))} \n                </ActorList>\n            </>} \n        </>\n    )\n}\n"],"names":["ActorList","styled","ActorItem","ActorPoster","ActorName","ActorCharacter","Cast","useState","cast","setCast","error","setError","loading","setLoading","id","useParams","useEffect","fetchMovieIdCast","movieId","FetchApiMovieIdCredits","response","data","Loader","map","cast_id","original_name","character","profile_path","src","img","alt"],"sourceRoot":""}